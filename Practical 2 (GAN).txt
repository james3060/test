import torch
import torch.nn as nn 
import torch.optim as optim 
import torchvision
import torchvision.transforms as transforms 
import matplotlib.pyplot as plt

# Define the generator
class Generator(nn.Module): 
    def __init__(self):
        super(Generator, self).__init__() 
        self.model = nn.Sequential( 
            nn.Linear(100, 256),
            nn.ReLU(), 
            nn.Linear(256, 784), 
            nn.ReLU(), 
            nn.Linear(784, 784),
            nn.Tanh()  # Output range [-1, 1]
        )

    def forward(self, x):
        return self.model(x).view(-1, 1, 28, 28)  # Reshape to MNIST image size

# Define the Discriminator
class Discriminator(nn.Module): 
    def __init__(self):
        super(Discriminator, self).__init__() 
        self.model = nn.Sequential( 
            nn.Flatten(),
            nn.Linear(784, 512), 
            nn.LeakyReLU(0.2), 
            nn.Linear(512, 1),
            nn.Sigmoid()  # Output range [0, 1]
        )

    def forward(self, x):
        return self.model(x.view(-1, 784))  # Flatten for discriminator 

# Prepare the DataLoader
transform = transforms.Compose([ 
    transforms.ToTensor(), 
    transforms.Normalize((0.5,), (0.5,))
])

dataset = torchvision.datasets.MNIST(root='./data', train=True, transform=transform, download=True)
dataloader = torch.utils.data.DataLoader(dataset, batch_size=64, shuffle=True)

# Training function
def train_gen(generator, discriminator, dataloader, num_epochs=5): 
    criterion = nn.BCELoss()
    g_optimizer = optim.Adam(generator.parameters(), lr=0.0002, betas=(0.5, 0.999))
    d_optimizer = optim.Adam(discriminator.parameters(), lr=0.002, betas=(0.5, 0.999))

    for epoch in range(num_epochs): 
        for real_data, _ in dataloader:
            batch_size = real_data.size(0) 
            real_data = real_data.view(batch_size, -1)

            # Train Discriminator 
            d_optimizer.zero_grad() 
            real_labels = torch.ones(batch_size, 1) 
            fake_labels = torch.zeros(batch_size, 1)

            outputs = discriminator(real_data) 
            d_loss_real = criterion(outputs, real_labels)

            z = torch.randn(batch_size, 100) 
            fake_data = generator(z) 
            outputs = discriminator(fake_data.detach()) 
            d_loss_fake = criterion(outputs, fake_labels)

            d_loss = d_loss_real + d_loss_fake 
            d_loss.backward() 
            d_optimizer.step()

            # Train Generator 
            g_optimizer.zero_grad() 
            outputs = discriminator(fake_data) 
            g_loss = criterion(outputs, real_labels) 
            g_loss.backward() 
            g_optimizer.step()

        print(f'Epoch [{epoch + 1}/{num_epochs}], d_loss: {d_loss.item()}, g_loss: {g_loss.item()}')

# Generate and save images
def generate_and_save_images(generator, num_images=16): 
    noise = torch.randn(num_images, 100)
    with torch.no_grad(): 
        generated_images = generator(noise)
        generated_images = (generated_images + 1) / 2.0  # Rescale to [0, 1] 

        # Save generated images
        grid_img = torchvision.utils.make_grid(generated_images, nrow=4, normalize=True)
        torchvision.utils.save_image(grid_img, 'generated_images.png') 
        plt.imshow(grid_img.permute(1, 2, 0))
        plt.axis('off') 
        plt.show()

# Initialize model and run training 
generator = Generator() 
discriminator = Discriminator()

train_gen(generator, discriminator, dataloader, num_epochs=20) 
generate_and_save_images(generator)