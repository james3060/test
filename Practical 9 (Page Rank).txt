1.Function: The random_walk_pagerank function computes PageRank scores using a random walk simulation on a directed graph represented by an adjacency matrix.
2.Normalization: The adjacency matrix is normalized to create a transition probability matrix, where each row sums to 1, representing the probability of moving from one node to its neighbors.
3.Random Walk Simulation:
The algorithm simulates a specified number of random walks.
For each walk, it randomly selects a starting node and iterates up to 100 steps, choosing to either follow a link (based on the damping factor) or jump to a random node.
Each time a node is visited, its PageRank score is incremented.
4.Normalization of Scores: After all walks, the scores are normalized so they sum to 1.

import numpy as np

def random_walk_pagerank(adjacency_matrix, num_walks=1000, damping_factor=0.85):
    # Normalize the adjacency matrix to create a transition probability matrix
    n = adjacency_matrix.shape[0]
    transition_matrix = np.zeros_like(adjacency_matrix, dtype=float)

    for i in range(n):
        row_sum = np.sum(adjacency_matrix[i])
        if row_sum > 0:
            transition_matrix[i] = adjacency_matrix[i] / row_sum

    # Initialize PageRank scores
    pagerank_scores = np.ones(n) / n

    for _ in range(num_walks):
        current_node = np.random.choice(n)
        for _ in range(100):  # Each walk can have a maximum of 100 steps
            if np.random.rand() < damping_factor:  # Follow the link
                next_node = np.random.choice(n, p=transition_matrix[current_node])
                current_node = next_node
            else:  # Random jump
                current_node = np.random.choice(n)
            pagerank_scores[current_node] += 1  # Increment score for visited node

    # Normalize the scores
    pagerank_scores /= np.sum(pagerank_scores)
   
    return pagerank_scores

# Example usage
if __name__ == "__main__":
    # Example adjacency matrix for a directed graph
    adjacency_matrix = np.array([[0, 1, 1],
                                  [0, 0, 1],
                                  [1, 0, 0]])
    pagerank_scores = random_walk_pagerank(adjacency_matrix)
    print("PageRank Scores:", pagerank_scores)



