Step 1: Setup MongoDB Environment
use movie_rental;  // Switch to or create a new database
db.createCollection("rentals");  // Create a collection called "rentals"

Step 2: Insert Sample Data
db.rentals.insertMany([
  {
    rental_id: 1,
    user_id: 201,
    movie_id: 101,
    rental_date: new Date("2024-09-30"),
    return_date: new Date("2024-10-05"),
    status: "returned"
  },
  {
    rental_id: 2,
    user_id: 202,
    movie_id: 102,
    rental_date: new Date("2024-09-28"),
    return_date: new Date("2024-10-02"),
    status: "returned"
  },
  {
    rental_id: 3,
    user_id: 201,
    movie_id: 103,
    rental_date: new Date("2024-09-25"),
    return_date: new Date("2024-10-01"),
    status: "returned"
  },
  {
    rental_id: 4,
    user_id: 203,
    movie_id: 104,
    rental_date: new Date("2024-10-01"),
    status: "rented"
  },
  {
    rental_id: 5,
    user_id: 202,
    movie_id: 105,
    rental_date: new Date("2024-09-27"),
    status: "rented"
  }
]);

Step 3: Identify Query Patterns
1)To find all rentals by a specific user:
db.rentals.find({ user_id: 201 });
2)To retrieve all currently rented movies:
db.rentals.find({ status: "rented" });
3)To retrieve rentals after a specific date:
db.rentals.find({ rental_date: { $gte: new Date("2024-09-28") } });

Step 4: Analyze Query Performance
Use the explain() method to check the query performance. Run it for each query and observe MongoDBâ€™s execution path.
db.rentals.find({ user_id: 201 }).explain("executionStats");

Step 5: Create Indexes Based on Query Patterns
1.Create an index on the user_id field to optimize queries based on users:
db.rentals.createIndex({ user_id: 1 });
2.Create an index on the status field to improve queries on rental status:
db.rentals.createIndex({ status: 1 });
3.To optimize date-based queries (rental date):
db.rentals.createIndex({ rental_date: 1 });

Step 6: Monitor Index Usage and Query Performance Over Time
Enable profiling to log all operations:
db.setProfilingLevel(2);

Step 7: Adjust Indexes Dynamically Based on New Query Patterns
db.rentals.createIndex({ user_id: 1, status: 1 });
db.rentals.createIndex({ rental_date: 1, status: 1 });

Step 8: Remove Unnecessary Indexes
db.rentals.dropIndex({ status: 1 });


